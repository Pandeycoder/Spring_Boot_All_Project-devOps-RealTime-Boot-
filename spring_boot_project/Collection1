 ======================================
       Collections........ 
=======================================


-> Why we need to go for collections 

-> What is Collections Fraemwork

-> Collections Hierarchy

-> List interface & impleementations

-> Set interface & impleementations

-> Queue interface & impleementations

-> Map interface & impleementations

-> Cursors 

-> Collections Sorting



============================ Approach - 1
  Variable
============================
         It is container that store the data

Data type : 
          Type of data that we can store in variable.

          1) Primitive(byte ,short,int ,long)

          2) Referenced data types(Array,String Class etc..)

          int a = 10;

          int b = 20;

I want to store 1000 value ?......1000 variable we .

I want to store 1 lakh values ?... 1 lakh variables


================== Approach - 2
    Arrays
==================

-> We can store group of values in single variable.

   int[] a=new int[500];
   a[0]=100;
   a[1]=200;
   a[2]=300;
   ....
   a[499]=7799;

-----------------
 Limitations
----------------

-> Array size is fixed.

-> We can store homogenious values (same type of value).


   Student s[] = new Student[100];

   s[0] = new Student(10, "Raju"); //valid

   s[1]=new Student[11,"Rani"]; //valid

   s[2] = new Employee(101,"Ramesh")//invalid
   ....
   s[99]=new Student(99,"john"); //valid


====================== Approach - 3
 Object Array
======================

-> Object[] a=new Object[100];

  a[0] = new Student(101,"Raju");
  a[1] = new Student(102,"Rani");

  a[2]= new Employee(101,"Raju",100.00);
  a[3]= new Employee(102,"Rani",200.00);  

  a[4]=new customer(101,"Raju",100.00);
  a[5]= new Customer(102,"Rani",200.00);  



=========================
      Collections
=========================

-> Colections is container which is  used to store the group of object / values.

-> Collections are growable in nature.
(dynamically collections size can be inc or decre based on data).


-> We can store any type of data in collection.
(homegeneuous & heterogeneuous )

-> Collections providing predefiend methods to insert , Update , delete , retrieve , sort.


-> Collections is a entity / container which is used to store group of object.

Collections ---> Collections Framework

--> Famework means ready made software.

collections is called as framework beacuse it is providing interface , classes and methods to performs operations on data.

8848749933

Collections.sort(num);

===================================
 
List : It is used to store group of objects.
     
      ->  dupilcate are allowed

set : It is used to store group of objects.

       -> Duplicates are not allowed.


Queue: It is used to store group of objects.

        --> FIFO

map: It is used to store group of objects.

      --> Key - Value Pair....

======================
Collections Interface
======================

--> it is super interface for list , set and queue.
 
 1) add ( Object obj) :

  -- it is used to store one obj.

 2) get (int index) : get obj

 3) remove (int index) : remove obj

 4) set (int index , Object obj) :insert obj using index

 5) indexOf(Object obj): first occurance of obj

 6) lastIndexOf(Object obj) : last occurance of obj

 7) listIterator() : to iterate collection obj

  
  Collection c=new Collection();

  c.add(100);


==============
LIst Interface:
===============

-> It is chlid element  of collection inteface.

-> Extending from collection interface.

-> Allow duplicate objects.

->it will maintain object in insertion order.


-> List interface having 4 implemntation.

  1) ArrayList
  2) LinkedList 
  3) Vector 
  4) Stack

   List l = new List();// In-valid we can't create obj for 

   ArrayList al=new ArrayList(); //valid 

   List l=new ArrayList(); //valid

   List l1=new LinkList(); //valid


//02- class 
================================

Cursors: --> Cursors are used to iterator colletions.

      1) Iterator
      2) ListIterator
      3) Enumerqations.

--> Collections frameworks related classes & interface are part of java.util.package.



---------------
ArrayList class
---------------

-> Implementation class of list interface.

-> duplicate object are allow 

-> Insertion order preserved 

-> null  value accepted.

-> Internal datastructure of arrayList is growable array.

  ArrayList a1=new ArrayList();

-> defacult capacity is 10.

  a1.add(1);
  a1.add(2);
  ....
  a1.add(11);  // 

---------------------
ArrayList Contractor
---------------------

1) ArrayList a1=new ArrayList();  //10

2) ArrayList a1=new ArrayList(int capacity);

3) ArrayList a1=new ArrayList(Collection c);

Method of ArrayList
--------------------

1) add (Object obj) 
           --> add object at end of the collection


2) addAll(Collection c)
          --> to add collection of object at end of the collection
          
15) add(int index,Object) 
           --> add object at given index         

3) remove(int index)
         --> to remove object based on given index 
          
4) remove(Object obj)
          --> to remove given object

5) get(int index)
       --> to get object based on index

6) contain(Obect obj)
       --> 

7) clear()

8) isEmpty()

9) retainAll(collection c)

10) indexOf(Object obj)

11) lastIndexOf(Object obj)

12) set(int index ,Object obj)

13) iterator() -> forward direction

14) listIterator()-> forward & backward


//ArrayList is not used for insertion(suffeling problem)


=================================
03-class
=================================

LinkedList
--------------------

-> Implementation of List interface.

-> Internal data structure is double linked list 

-> insertation order preserved.

-> duplicate objects are allowed .

-> null object also allowed 

-> homognious & hetereogenious data we can store.

===================
Vector
===================

-> Implementation class of listInterface.

-> Internal data structure is growallble array.

-> duplicates are allowed .

-> insertion order preserved.

-> This is synchronized.

-> vector is called as legacy class (jdk version 1.0)

-> To traverse vector we can you use Enumeration as a cursor .

-> Enumeration is called as Legacy Cursor(jdk 1.0v).

===========
Stack
===========

-> Implementation class of List interface.

-> Extending from Vector class.

-> data Structure of Stack is LIFO (last in first out)

-> push() --> to insert object 

-> peek() --> to get last element 

-> pop() --> to remove last element.

================
    04-class
================

Set
-------------------

-> Set is a interface available in java.util.package

-> Set interface extending from Collection interface.

-> Set is used to store group of objects .

-> Duplicate objects are not allowed.

-> Supports homogenoius & hetero genoius.

=====================================
Set interface Implementation classes
=====================================

-> HashSet

-> LinkedHashSet

-> TreeSet


------------------------------------------------
1) Iterator --> forward dirr (List & set)

2) ListIterator --> forward & backward (List iml classes)

3) Enumeration --> forward & support for legacy collection
------------------------------------------------------



HashSet
-----------------------------------------
-> Implementation clas of set interface.

-> Duplicate are not allowed

-> Null is allowed

-> Insertion order will not maintain

-> initial capacity is 16 or 16 bucket create internally. 

-> Load factor 0.75

-> Internal Datastructure is Hashtable.

---------------------------
LinkedHashSet
---------------------------

-> Implementation class for set interface.

-> Duplicates are not allowed.

-> Insertion order will be preserved.

-> internal Data structure is Hash table + Double linked list.

-> Load factor 0.75

-> initial capacity is 16.

---------------------------------
TreeSet
---------------------------------

-> implementation class for set interface.

-> it is maintain natural sorting order.

-> null not allowed .

-> it follow binary tree.

-> it allow only Homongenious Values.

-> Internal datastructure is BinaryTree.

-> It is not synchronized.

-> Duplicate are not allow.

-> TreeSet should perform sorting so always it will compare new added object with old object .In order compare object shuld be of same type.


---------------------
     Map
---------------------

-> map is an interface available in java.util.package.

-> Map is used to store the data in key-value format.

-> One key-value is called as one Entry.

-> One Map can object have multiple entries.

-> key should be unique and value can be duplicate.

Map<K,V> ====> Map<Object,Object

-> if we try to store duplicate in map then it will replace old key data with new key data.

Map interface having several implementation classes.

1) HashMap 
2) LinkedHashMap
3) TreeMap
4) HashTable
5) IdentityHashMap
6) WeakHashMap

1) Put() -- to store one etry in map object

2) get(k) -- to get value on key

3) reomove(k)-- to remove one entry based on key

4) containskey(k)-- to check of entry based on key.

5) keySet()-- To get all key of map.

6) values()-- to get all values of the map

7) entrySet()-- to get all entries

8) clear()-- to remove all the entry of map

9) isEmpty() -- to check weather map obj empty or not.

----------------
HashMap
----------------

-> It is impl class for Map interface .

-> Used to store data in key-value format.

-> Default capacity is 16.

-> Load factor is 0.75.

-> Underlying datastrucutre is hashtable.

-> Insertion Order will not maintain hashmap.

---------------
LinkedHashMap
---------------

---------
TreeMap
-----------
springBoot AI

july agust sept
tcs ion 

рдЙрддрдирд╛ рдХреЛрдИ рдкрд╛рд░реНрдЯреА рдирд╣реАрдВ рдХрд░ рд╕рдХрддреА ЁЯУ╖ рдкрд░ рдпреЗ рдмрд╛рдд рднреА рд╕рд╣реА рд╣реИ :-  6 рд╕рд╛рд▓ рд╕реЗ UP рдореЗрдВ рдХреЛрдИ рд╡реЗрдХреЗрдВрд╕реА рдирд╣реА рдЖрдИ рд╕рд╛рд░реЗ рдкреЗрдкрд░ рд▓реАрдХ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВ рднрдЧрд╡рд╛рди рдЖрд╕реНрдерд╛ рдХрд╛ рд╡рд┐рд╖рдп рд╣реИ рд╡реЛрдЯ рджреЗрдиреЗ рдХрд╛ рдирд╣реАЁЯУ╖

рдЬрд┐рд╕ рд╕рд░рдХрд╛рд░ рдиреЗ рдкреВрд░реЗ рдЕрдпреЛрдзреНрдпрд╛ рдХреЛ рдЪрдордХрд╛ рджрд┐рдпрд╛ ! рдирдпрд╛ рдПрдпрд░рдкреЛрд░реНрдЯ рджрд┐рдпрд╛, рд░реЗрд▓рд╡реЗ рд╕реНрдЯреЗрд╢рди рджрд┐рдпрд╛ред 500 рд╕рд╛рд▓реЛрдВ рдХреЗ рдмрд╛рдж рд░рд╛рдо рдордВрджрд┐рд░ рдмрдирд╡рд╛рдХрд░ рджрд┐рдпрд╛ред рдкреВрд░реА рдХреА рдкреВрд░реА рдПрдХ рдордВрджрд┐рд░ рдЗрдХреЛрдиреЙрдореА рдмрдирд╛рдХрд░ рджреА ! рдЙрд╕ рдкрд╛рд░реНрдЯреА рдХреЛ рдЕрдпреЛрдзреНрдпрд╛ рдХреА  рд╕реАрдЯ рдкрд░ рд╣рд╛рд░ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдирд╛ рдкрдбрд╝рд╛ ЁЯе║ рдореИрдВрдиреЗ рдЦрд╝реБрдж рджреЗрдЦрд╛ рд╣реИ рдЬрд┐рддрдирд╛ рд╡рд┐рдХрд╛рд╕ рдЕрдпреЛрдзреНрдпрд╛ рдХрд╛ рдмреАрдЬреЗрдкреА рдиреЗ рдХрд┐рдпрд╛ рд╣реИ